{"version":3,"sources":["components/Post.jsx","components/Comment.jsx","components/CommentList.jsx","components/User.jsx","components/PostList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Post","props","react_default","a","createElement","className","title","body","children","comments","Comment","href","concat","comment","email","name","CommentList","filter","item","postId","map","key","id","User","user","username","PostList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","search","bind","assertThisInitialized","event","value","target","trim","setState","_this2","type","onChange","posts","includes","users","userId","Component","App","data","urlPosts","urlUsers","urlComments","status","showPosts","reduce","acc","dataArrs","_dataArrs","slicedToArray","usersObj","usersToObj","url","fetch","then","resp","json","urls","Promise","all","createPromise","_this3","objectSpread","getAllData","responses","parseData","onClick","disabled","PostList_PostList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4bcd959c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Post(props) {\r\n  return (\r\n    <div className=\"post\">\r\n      <h3>{props.title}</h3>\r\n      <p>{props.body}</p>\r\n      {props.children}\r\n      {props.comments}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nexport default function Comment(props) {\r\n  return (\r\n    <div className=\"comment\">\r\n      <div>\r\n        <a href={`mailto:${props.comment.email}`}>\r\n          {props.comment.name}</a>\r\n        <p>{props.comment.body}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nexport default function CommentList(props) {\r\n  function getComments() {\r\n    const comments = props.comments.filter(item =>\r\n      item.postId === props.postId).map(item =>\r\n        <Comment key={item.id} comment={item} />);\r\n    return comments;\r\n  }\r\n\r\n  return (\r\n    <div className=\"comment-list\">\r\n      {getComments()}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function User(props) {\r\n  return (\r\n    <div className=\"user-info\">\r\n      <div>{props.user.name}</div>\r\n      <div>\r\n        <a href={`mailto:${props.user.email}`}>\r\n          {props.user.username}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Post from './Post';\r\nimport CommentList from './CommentList';\r\nimport User from './User';\r\n\r\nexport default class PostList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: ''\r\n    };\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  search(event) {\r\n    const value = event.target.value;\r\n    if (value.trim()) {\r\n      this.setState(() => ({\r\n        search: value\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"post-list\">\r\n        <input type=\"text\" onChange={this.search} value={this.state.search} />\r\n        {this.props.posts\r\n          .filter(item =>\r\n            item.title.includes(this.state.search.trim())\r\n            || item.body.includes(this.state.search.trim()))\r\n          .map(item =>\r\n            <Post key={item.id} title={item.title} body={item.body}\r\n              comments={<CommentList postId={item.id} comments={this.props.comments} />}>\r\n              <User user={this.props.users[item.userId]} />\r\n            </Post>)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport PostList from './components/PostList';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.data = [\n      this.props.urlPosts, this.props.urlUsers, this.props.urlComments];\n    this.state = {\n      posts: [],\n      users: [],\n      comments: [],\n      status: 'before download'\n    };\n    this.showPosts = this.showPosts.bind(this);\n  }\n\n  usersToObj(users) {\n    const newObj = users.reduce(((acc, user) => {\n      acc[user.id] = user;\n      return acc;\n    }), {});\n    return newObj;\n  }\n\n  parseData(dataArrs) {\n    const [posts, users, comments] = dataArrs;\n    const usersObj = this.usersToObj(users);\n\n    this.setState(() => ({\n      posts: posts,\n      users: usersObj,\n      comments: comments,\n      status: 'ready to show'\n    }));\n  }\n\n  createPromise(url) {\n    return fetch(url).then(resp => resp.json());\n  }\n\n  getAllData(urls) {\n    return Promise.all(urls.map(url => this.createPromise(url)));\n  }\n\n  showPosts() {\n    this.setState((state) => ({\n      ...state,\n      status: 'loading'}));\n    this.getAllData(this.data).then(responses => this.parseData(responses));\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.status === 'before download'\n          && <button className=\"download\" onClick={this.showPosts}>Show Todos!</button>}\n        {this.state.status === 'loading'\n          && <button className=\"download\" disabled>Loading...</button>}\n        {this.state.status === 'ready to show'\n          && <PostList posts={this.state.posts} users={this.state.users}\n            comments={this.state.comments} />}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst urlPosts = 'https://jsonplaceholder.typicode.com/posts';\nconst urlUsers = 'https://jsonplaceholder.typicode.com/users';\nconst urlComments = 'https://jsonplaceholder.typicode.com/comments';\n\nReactDOM.render(\n  <App urlPosts={urlPosts} urlUsers={urlUsers} urlComments={urlComments} />,\n  document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}