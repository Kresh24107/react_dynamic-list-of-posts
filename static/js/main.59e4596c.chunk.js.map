{"version":3,"sources":["components/Post.jsx","components/Comment.jsx","components/CommentList.jsx","components/User.jsx","components/PostList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Post","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","title","body","children","comments","Component","Comment","href","concat","comment","email","name","CommentList","_this2","filter","item","postId","map","Comment_Comment","key","id","getComments","User","user","username","PostList","search","bind","assertThisInitialized","event","value","target","setState","type","onChange","posts","includes","trim","Post_Post","CommentList_CommentList","User_User","users","userId","App","data","urlPosts","urlUsers","urlComments","status","showPosts","reduce","acc","dataArrs","_dataArrs","slicedToArray","usersObj","usersToObj","url","fetch","then","resp","json","urls","Promise","all","createPromise","_this3","getAllData","responses","parseData","onClick","disabled","PostList_PostList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59e4596c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Post extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"post\">\r\n        <h3>{this.props.title}</h3>\r\n        <p>{this.props.body}</p>\r\n        {this.props.children}\r\n        {this.props.comments}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Comment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"comment\">\r\n        <div>\r\n          <a href={`mailto:${this.props.comment.email}`}>\r\n            {this.props.comment.name}</a>\r\n          <p>{this.props.comment.body}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Comment from './Comment';\r\n\r\nexport default class CommentList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  getComments() {\r\n    const comments = this.props.comments.filter(item =>\r\n      item.postId === this.props.postId).map(item =>\r\n      <Comment key={item.id} comment={item} />)\r\n    return comments;\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"comment-list\">\r\n        {this.getComments()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class User extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"user-info\">\r\n        <div>{this.props.user.name}</div>\r\n        <div>\r\n          <a href={`mailto:${this.props.user.email}`}>\r\n            {this.props.user.username}\r\n          </a>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Post from './Post';\r\nimport CommentList from './CommentList';\r\nimport User from './User';\r\n\r\nexport default class PostList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: ''\r\n    };\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  search(event) {\r\n    const value = event.target.value;\r\n    this.setState(() => ({search: value}))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"post-list\">\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.search}\r\n          value={this.state.search} />\r\n        {this.props.posts\r\n          .filter(item =>\r\n            item.title.includes(this.state.search.trim()) ||\r\n            item.body.includes(this.state.search.trim()))\r\n          .map(item =>\r\n            <Post key={item.id}\r\n            title={item.title} body={item.body}\r\n              comments={\r\n                <CommentList postId={item.id} comments={this.props.comments} />}>\r\n              <User user={this.props.users[item.userId]} />\r\n            </Post>)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport PostList from './components/PostList';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.data = [\n      this.props.urlPosts, this.props.urlUsers, this.props.urlComments];\n    this.state = {\n      posts: [],\n      users: [],\n      comments: [],\n      status: 'before dawnload'\n    }\n    this.showPosts = this.showPosts.bind(this);\n  }\n\n  usersToObj(users) {\n    const newObj = users.reduce(((acc, user) => {\n      acc[user.id] = user;\n      return acc;\n    }), {})\n    return newObj;\n  }\n\n  parseData(dataArrs) {\n    const [posts, users, comments] = dataArrs;\n    const usersObj = this.usersToObj(users);\n\n    this.setState(() => ({\n      posts: posts,\n      users: usersObj,\n      comments: comments,\n      status: 'redy to show'\n    }))\n  }\n\n  createPromise(url) {\n    return fetch(url).then(resp => resp.json());\n  }\n\n  getAllData(urls) {\n    return Promise.all(urls.map(url => this.createPromise(url)));\n  }\n\n  showPosts() {\n    this.setState(state => state.status = 'loading');\n    this.getAllData(this.data).then(responses => this.parseData(responses))\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.status === 'before dawnload'\n          && <button className=\"download\" onClick={this.showPosts}>\n            Show Todos!</button>}\n        {this.state.status === 'loading'\n          && <button className=\"download\" disabled>Loading...</button>}\n        {this.state.status === 'redy to show'\n          && <PostList posts={this.state.posts} users={this.state.users}\n            comments={this.state.comments} />}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst urlPosts = 'https://jsonplaceholder.typicode.com/posts';\nconst urlUsers = 'https://jsonplaceholder.typicode.com/users';\nconst urlComments = 'https://jsonplaceholder.typicode.com/comments';\n\nReactDOM.render(<App urlPosts={urlPosts} urlUsers={urlUsers} urlComments={urlComments}\n  />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}